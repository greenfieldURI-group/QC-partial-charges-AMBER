/*
 * This C++ program converts the .dat output file generated by the GAMESS-US package
 * into the required input format for the RESP charge fitting procedure.
 * 
 * Author: Faramarz Joodaki 
 * Research Group: Professor Michael L. Greenfield
 * Institution: University of Rhode Island
 *
 * Purpose:
 * - Parse electrostatic potential (ESP) data from GAMESS-US .dat files
 * - Format atomic coordinates and ESP grid points for compatibility with the RESP fitting tool
 * - Make first step RESP input files.
 * 
 * Please cite appropriately if this code is used in any published work.
 *
 * Input files
 * - GAMESS generated dat file that includes ESP information
 * - gamess-resp.in that users need to prepare it.
 *
 * Parameters in gamess-resp.in 
 * - gamess-dat-file: Path and filename of the GAMESS-generated .dat file.
 * - qc_min: Indicates whether quantum chemical minimization was performed before ESP calculation (YES or NO)
 * - net_charge: The net charge of the system.
 */

#include <iostream>
#include <string>
#include <sstream>
#include <fstream>
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <stdlib.h>
#include <iomanip>


using namespace std;

int main()
{
 cout<<"************************************************************************************"<<endl;
 cout<<"GAMESS_to_RESP"<<endl;
 cout<<"************************************************************************************"<<endl;
 cout<< " This C++ program converts the .dat output file generated by the GAMESS-US package" <<endl;
 cout<< " into the required input format for the RESP charge fitting procedure." <<endl;
 cout<< " " <<endl;
 cout<< " Author: Faramarz Joodaki" <<endl;
 cout<< " Research Group: Professor Michael L. Greenfield" <<endl;
 cout<< " Institution: University of Rhode Island" <<endl;
 cout<< " " <<endl;
 cout<< " Please cite appropriately if this code is used in any published work." <<endl;
 cout<<"************************************************************************************"<<endl;
    // read input file
    //============================================
    const char * filename_input = "./gamess-resp.in";
    FILE * pFile_input;

    char * datfile = new char [300];
    const char * espdatfile = "./esp.dat";
    const char * respinfile = "./resp.in";
    char * str_check= new char[20];
    int net_charge;
    char * qc_min= new char[3];
    bool   qc_min_b;
    int i_line, j_line;;
    int n_line=3;

    pFile_input = fopen (filename_input,"r");

    for (i_line =0; i_line<n_line ; ++i_line)
    {
      fscanf (pFile_input, "%s", str_check);
      if (strcmp(str_check,"gamess-dat-file")==0)  
      {
        fscanf (pFile_input, "%s", datfile);
      }  
      else if (strcmp(str_check,"qc_min")==0)  
      {
        fscanf (pFile_input, "%s", qc_min);
        if (strcmp(qc_min, "yes")==0 | strcmp(qc_min, "YES")==0 | strcmp(qc_min, "Yes")==0)
        {
            qc_min_b=true;
        }
        else if (strcmp(qc_min, "no")==0 | strcmp(qc_min, "NO")==0 | strcmp(qc_min, "No")==0)
        {
            qc_min_b=false;
        }
      } 
      else if (strcmp(str_check,"net_charge")==0)  
      {
        fscanf (pFile_input, "%i", &net_charge);
      } 
    }

    fclose(pFile_input);

    // find the number of line in gamess dat file.
    //============================================
    int line_count = 0;
    int num_line;

    string line;
    ifstream ifs (datfile);

    if (ifs.is_open())
    {
        while (getline(ifs, line))
        {
            line_count++;
        }   
        ifs.close();
    }  
    num_line = line_count;

    //cout << "num of lines in the GAMESS dat file: " << num_line << endl;

    int natom, nkind, nbond;
    string a1, a2, a3, a4, a5, a6;
    int i1, i2, i3;
    double d1, d2, d3;
    double xx, yy, zz;
    double ch;
    

    ifstream pFile (datfile, ios::in);

    // find number of atoms and x, y, z of atoms
    //============================================
    for (i_line=0; i_line < num_line; ++i_line)
    {
        getline(pFile , line);
        
        if (line=="-------- START OF -MOLPLT- INPUT FILE ----------")
        {
            pFile >> a1  >>  natom  
                  >> a2  >>  nkind 
                  >> a3  >>  nbond ;
            ++i_line;      
        }

    }

    pFile.close();

    cout << "The name of .dat file is: "<< datfile << endl;
    cout << "Number of atoms: "<< natom << endl;
    cout << "Net Charges: "<< net_charge << endl;

    double * x_coord = new double [natom];
    double * y_coord = new double [natom];
    double * z_coord = new double [natom];
    double * charge = new double [natom];

    int max_ngrid = 50000;

    double * x_coord_grid = new double [max_ngrid];
    double * y_coord_grid = new double [max_ngrid];
    double * z_coord_grid = new double [max_ngrid];
    double * eps = new double [max_ngrid];   

    ifstream pFile2 (datfile, ios::in);

    int check=0;
    int check_crit;

    if (qc_min_b)
    {
        check_crit=1;
    }

    if (!qc_min_b)
    {
        check_crit=0;
    }

    ostringstream oss;
    oss << " ELECTROSTATIC POTENTIAL COMPUTED FOR"
        << setw(6) << right << natom
        << " ATOMS, TOTAL CHARGE="
        << setw(5) << right << net_charge;

    string line_check = oss.str();


    //cout << "line_check: "<< line_check<< endl;

    //cout << line_check << endl;

    for (i_line=0; i_line < num_line; ++i_line)
    {
        getline(pFile2 , line);

         if (line==line_check)
         { 
             
             //cout << "here" << endl; 
            
            if (check==check_crit)
            {   
                //cout << "here" << endl;
                for (j_line=0; j_line < natom; ++j_line)
                {
                    pFile2 >> i1 >> ch >> xx >> yy >> zz;
                    x_coord[j_line] = xx;
                    y_coord[j_line] = yy;
                    z_coord[j_line] = zz;
                    charge [j_line] = ch;
                }   
            } 

            ++check;         
         }          

    }
    pFile2.close();
    

    check=0;
    int ngrid=0;
    ifstream pFile3 (datfile, ios::in);
    
    // find eps map 
    for (i_line=0; i_line < num_line; ++i_line)
    {
        getline(pFile3 , line);

        if (line==" ELECTROSTATIC POTENTIAL, IPT,X,Y,Z,ELPOTT")
        {
            
            if (check==check_crit)
            {
                pFile3 >> a1 >> a2 >> a3 >> a4 >> a5 >> a6 >> ngrid;


                for (j_line=0; j_line < ngrid; ++j_line)
                {
                    pFile3 >> i1 >> xx >> yy >> zz >> ch;
                    x_coord_grid[j_line] = xx;
                    y_coord_grid[j_line] = yy;
                    z_coord_grid[j_line] = zz;
                    eps [j_line] = ch;      
                }             
            }
            ++check;
        }
    }


// print resp.in file
//============================================


    FILE * pFile_respin;
    pFile_respin = fopen (respinfile,"w");

    fprintf(pFile_respin, " RESP Generated by Faramarz Joodaki\n");
    fprintf(pFile_respin, " &cntrl\n");
    fprintf(pFile_respin, "  ioutopt=1, iqopt=1, nmol=1, ihfree=1, irstrnt=1, qwt= 0.0005\n");
    fprintf(pFile_respin, " &end\n  1.0\n");
    fprintf(pFile_respin, "fara\n");
    fprintf(pFile_respin, "%5i %4i\n", net_charge, natom);

    for (j_line=0; j_line < natom; ++j_line)
    {
        fprintf(pFile_respin, "%5.0lf %4i\n", charge [j_line], 0); 
    }
    fprintf(pFile_respin,"\n\n\n\n\n\n\n");
    cout<< "The resp.in file has been successfully generated.!" <<endl;

// print eps file
//============================================
    FILE * pFile_esp;
    pFile_esp = fopen (espdatfile,"w");
    fprintf(pFile_esp, "%5i %4i %4i\n", natom, ngrid, 0);
    for (j_line=0; j_line < natom; ++j_line)
    {
        fprintf(pFile_esp, "%32.7E %15.7E %15.7E\n", 
        x_coord[j_line], y_coord[j_line], z_coord[j_line] ); 
    }    

    for (j_line=0; j_line < ngrid; ++j_line)
    {
        fprintf(pFile_esp, "%16.7E %15.7E %15.7E %15.7E\n", 
        eps[j_line], x_coord_grid[j_line], y_coord_grid[j_line], z_coord_grid[j_line] ); 
    }
    cout<< "The esp.dat file has been successfully generated.!" <<endl;    

}